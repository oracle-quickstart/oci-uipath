#ps1_sysnative
    $UserName="${instance_username}"
    $Password="${instance_password}"
    $temp = "C:\scripts"
    $link = "https://raw.githubusercontent.com/oracle-quickstart/oci-uipath/master/robot/packer/scripts/Install-UiPathRobot.ps1"
    $file = "Install-UiRobot.ps1"

    # Create or update existing user
    if($UserName -eq "opc") {
    $admin = [ADSI]("WinNT://./$UserName, user")
    $admin.SetPassword("$Password")
    } else {
    $Computer = [ADSI]"WinNT://$Env:COMPUTERNAME,Computer"
    $User = $Computer.Create("User", $UserName)
    $User.SetPassword("$Password")
    $User.SetInfo()
    $User.FullName = "$UserName"
    $User.SetInfo()
    $User.Put("Description", "UiPath Robot Admin Account")
    $User.SetInfo()
    $User.UserFlags = 65536
    $User.SetInfo()
    $Group = [ADSI]("WinNT://$Env:COMPUTERNAME/Administrators,Group")
    $Group.add("WinNT://$Env:COMPUTERNAME/$UserName")
    }

    New-Item $temp -ItemType directory
    Set-Location -Path $temp
    $policylist = Get-ExecutionPolicy -List
    Write-Host $policylist
    Set-ExecutionPolicy Unrestricted -Scope Process -Force

    if ("${is_orchestrator_dns_resolvable}" -match "No") {

        #Adding Orchestrator IP for hostname to hosts file
        $hostsFilePath = "$($Env:WinDir)\system32\Drivers\etc\hosts"
        $hostsFile = Get-Content $hostsFilePath

        Write-Host "About to add ${orchestratorIP} for ${orchestratorHostname} to hosts file" -ForegroundColor Gray

        $escapedHostname = [Regex]::Escape("${orchestratorHostname}")
        $CheckHostnameOnly = $false
        $patternToMatch = If ($CheckHostnameOnly) { ".*\s+$escapedHostname.*" } Else { ".*${orchestratorIP}\s+$escapedHostname.*" }
        If (($hostsFile) -match $patternToMatch)  {
            Write-Host ${orchestratorIP}.PadRight(20," ") "${orchestratorHostname} - not adding; already in hosts file" -ForegroundColor DarkYellow
        } 
        Else {
            Write-Host ${orchestratorIP}.PadRight(20," ") "${orchestratorHostname} - adding to hosts file... " -ForegroundColor Yellow -NoNewline
            Add-Content -Encoding UTF8  $hostsFilePath ("${orchestratorIP}".PadRight(20, " ") + "${orchestratorHostname}")
            Write-Host " done"
        }
    }

    if ("${is_orchestrator_certificate_trusted}" -match "No") {

        $userCertificatePass = "${orchCertificatePass}" | ConvertTo-SecureString -AsPlainText -Force
        $rawByteCert = [System.Convert]::FromBase64String("${orchCertificateBase64}")
        [io.file]::WriteAllBytes("$temp\orchestratorCert.pfx", $rawByteCert)
        Import-PfxCertificate -FilePath "$temp\orchestratorCert.pfx" -CertStoreLocation Cert:\LocalMachine\Root -Password $userCertificatePass
    }

    Invoke-WebRequest -Uri $link -OutFile "$temp\$file"
    & "$temp\$file" -orchestratorUrl "${orchestrator_url}" -Tennant "${orchestrator_tennant}" -orchAdmin "${orchestrator_admin}" -orchPassword '${orchestrator_adminpw}' -adminUsername "$UserName" -machinePassword "$Password" -HostingType "Standard"  -credType "Default" -RobotType "${robot_type}" -RobotVersion "${robot_version}"